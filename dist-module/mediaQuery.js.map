{"version":3,"sources":["../src/mediaQuery.js"],"names":["stringOrNumber","PropTypes","oneOfType","string","number","matchers","orientation","oneOf","scan","aspectRatio","deviceAspectRatio","height","deviceHeight","width","deviceWidth","color","bool","colorIndex","monochrome","resolution","features","minAspectRatio","maxAspectRatio","minDeviceAspectRatio","maxDeviceAspectRatio","minHeight","maxHeight","minDeviceHeight","maxDeviceHeight","minWidth","maxWidth","minDeviceWidth","maxDeviceWidth","minColor","maxColor","minColorIndex","maxColorIndex","minMonochrome","maxMonochrome","minResolution","maxResolution","types","all","grid","aural","braille","handheld","print","projection","screen","tty","tv","embossed","type","Object","keys"],"mappings":"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","sourcesContent":["import PropTypes from 'prop-types'\n\nconst stringOrNumber = PropTypes.oneOfType([\n  PropTypes.string,\n  PropTypes.number\n])\n\n// properties that match media queries\nconst matchers = {\n  orientation: PropTypes.oneOf([\n    'portrait',\n    'landscape'\n  ]),\n\n  scan: PropTypes.oneOf([\n    'progressive',\n    'interlace'\n  ]),\n\n  aspectRatio: PropTypes.string,\n  deviceAspectRatio: PropTypes.string,\n\n  height: stringOrNumber,\n  deviceHeight: stringOrNumber,\n\n  width: stringOrNumber,\n  deviceWidth: stringOrNumber,\n\n  color: PropTypes.bool,\n\n  colorIndex: PropTypes.bool,\n\n  monochrome: PropTypes.bool,\n  resolution: stringOrNumber\n}\n\n// media features\nconst features = {\n  minAspectRatio: PropTypes.string,\n  maxAspectRatio: PropTypes.string,\n  minDeviceAspectRatio: PropTypes.string,\n  maxDeviceAspectRatio: PropTypes.string,\n\n  minHeight: stringOrNumber,\n  maxHeight: stringOrNumber,\n  minDeviceHeight: stringOrNumber,\n  maxDeviceHeight: stringOrNumber,\n\n  minWidth: stringOrNumber,\n  maxWidth: stringOrNumber,\n  minDeviceWidth: stringOrNumber,\n  maxDeviceWidth: stringOrNumber,\n\n  minColor: PropTypes.number,\n  maxColor: PropTypes.number,\n\n  minColorIndex: PropTypes.number,\n  maxColorIndex: PropTypes.number,\n\n  minMonochrome: PropTypes.number,\n  maxMonochrome: PropTypes.number,\n\n  minResolution: stringOrNumber,\n  maxResolution: stringOrNumber,\n\n  ...matchers\n}\n\n// media types\nconst types = {\n  all: PropTypes.bool,\n  grid: PropTypes.bool,\n  aural: PropTypes.bool,\n  braille: PropTypes.bool,\n  handheld: PropTypes.bool,\n  print: PropTypes.bool,\n  projection: PropTypes.bool,\n  screen: PropTypes.bool,\n  tty: PropTypes.bool,\n  tv: PropTypes.bool,\n  embossed: PropTypes.bool\n}\n\nconst all = { ...types, ...features }\n\n// add the type property\nmatchers.type = Object.keys(types)\n\nexport default {\n  all: all,\n  types: types,\n  matchers: matchers,\n  features: features\n}\n"],"file":"mediaQuery.js"}