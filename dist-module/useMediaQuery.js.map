{"version":3,"sources":["../src/useMediaQuery.js"],"names":["makeQuery","settings","query","hyphenateKeys","obj","keys","Object","length","reduce","result","key","useIsUpdate","ref","React","useRef","useEffect","current","useDevice","deviceFromProps","deviceFromContext","useContext","Context","getDevice","useState","device","setDevice","newDevice","useQuery","getQuery","setQuery","newQuery","useMatchMedia","getMatchMedia","mq","setMq","isUpdate","dispose","useMatches","mediaQuery","matches","setMatches","updateMatches","addListener","removeListener","useMediaQuery","onChange","deviceSettings","Error"],"mappings":"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","sourcesContent":["import React from 'react'\nimport matchMedia from 'matchmediaquery'\nimport hyphenate from 'hyphenate-style-name'\nimport areObjectsEqual from 'shallow-equal/objects'\nimport toQuery from './toQuery'\nimport Context from './Context'\n\nconst makeQuery = (settings) => settings.query || toQuery(settings)\n\nconst hyphenateKeys = (obj) => {\n  if (!obj) return null\n  const keys = Object.keys(obj)\n  if (keys.length === 0) return null\n  return keys.reduce((result, key) => {\n    result[hyphenate(key)] = obj[key]\n    return result\n  }, {})\n}\n\nconst useIsUpdate = () => {\n  const ref = React.useRef(false)\n\n  React.useEffect(() => {\n    ref.current = true\n  }, [])\n\n  return ref.current\n}\n\nconst useDevice = (deviceFromProps) => {\n  const deviceFromContext = React.useContext(Context)\n  const getDevice = () =>\n    hyphenateKeys(deviceFromProps) || hyphenateKeys(deviceFromContext)\n  const [ device, setDevice ] = React.useState(getDevice)\n\n  React.useEffect(() => {\n    const newDevice = getDevice()\n    if (!areObjectsEqual(device, newDevice)) {\n      setDevice(newDevice)\n    }\n  }, [ deviceFromProps, deviceFromContext ])\n\n  return device\n}\n\nconst useQuery = (settings) => {\n  const getQuery = () => makeQuery(settings)\n  const [ query, setQuery ] = React.useState(getQuery)\n\n  React.useEffect(() => {\n    const newQuery = getQuery()\n    if (query !== newQuery) {\n      setQuery(newQuery)\n    }\n  }, [ settings ])\n\n  return query\n}\n\nconst useMatchMedia = (query, device) => {\n  const getMatchMedia = () => matchMedia(query, device || {}, !!device)\n  const [ mq, setMq ] = React.useState(getMatchMedia)\n  const isUpdate = useIsUpdate()\n\n  React.useEffect(() => {\n    if (isUpdate) {\n      // skip on mounting, it has already been set\n      setMq(getMatchMedia())\n    }\n\n    return () => {\n      mq.dispose()\n    }\n  }, [ query, device ])\n\n  return mq\n}\n\nconst useMatches = (mediaQuery) => {\n  const [ matches, setMatches ] = React.useState(mediaQuery.matches)\n\n  React.useEffect(() => {\n    const updateMatches = () => {\n      setMatches(mediaQuery.matches)\n    }\n    mediaQuery.addListener(updateMatches)\n    updateMatches()\n\n    return () => {\n      mediaQuery.removeListener(updateMatches)\n    }\n  }, [ mediaQuery ])\n\n  return matches\n}\n\nconst useMediaQuery = (settings, device, onChange) => {\n  const deviceSettings = useDevice(device)\n  const query = useQuery(settings)\n  if (!query) throw new Error('Invalid or missing MediaQuery!')\n  const mq = useMatchMedia(query, deviceSettings)\n  const matches = useMatches(mq)\n  const isUpdate = useIsUpdate()\n\n  React.useEffect(() => {\n    if (isUpdate && onChange) {\n      onChange(matches)\n    }\n  }, [ matches ])\n\n  return matches\n}\n\nexport default useMediaQuery\n"],"file":"useMediaQuery.js"}